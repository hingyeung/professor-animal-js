STARTING LOCAL DYNAMODB
java -Djava.library.path=./DynamoDBLocal_lib -jar DynamoDBLocal.jar -sharedDb -inMemory

CREATE TABLE
aws dynamodb create-table --endpoint-url http://localhost:8000  --table-name AnimalGenieUserSession --attribute-definitions AttributeName=id,AttributeType=S --key-schema AttributeName=id,KeyType=HASH --provisioned-throughput ReadCapacityUnits=1,WriteCapacityUnits=1

LIST ALL ITEMS
aws dynamodb scan  --endpoint-url http://localhost:8000  --table-name AnimalGenieUserSession

GET ITEM
aws dynamodb get-item  --endpoint-url http://localhost:8000  --table-name AnimalGenieUserSession --key '{"id":{"S":"403f864b-3f12-4987-ad87-0377f2b6f5d4"}}'

ACCESS KEY
When using DynamoDB in a Lambda, "accessKeyId" and "secretAccessKey" are not required (you would get
invalid key exception if they are provided). It is because Lambda has its own IAM role and that role
determines if the Lambda can access DynamoDB or not.

UPLOADING CODE TO LAMBDA
aws lambda update-function-code --zip-file fileb://./dist/lambda.zip --function-name $LAMBDA_ARN

CONFIG FILES
While config.json for environments are git-ignored, the code expects to find config file in app/configs/<ENV>/config.json. The config.json should look like:
{
  // endpoint to DynamoDB, not required in prod (AWS)
  "endpoint": "http://localhost:8000",
  // region is required in prod (AWS) as well as dev
  "region": "ap-southeast-2"
}
